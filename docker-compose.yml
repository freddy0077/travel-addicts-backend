version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: travel-addicts-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: travel_addicts
      POSTGRES_USER: travel_user
      POSTGRES_PASSWORD: travel_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d/
    networks:
      - travel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travel_user -d travel_addicts"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: travel-addicts-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Travel Addicts Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-backend
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
      
      # Server Configuration
      NODE_ENV: production
      PORT: 4000
      
      # JWT Configuration
      JWT_SECRET: "travel_addicts_super_secure_jwt_secret_2024_production"
      JWT_EXPIRES_IN: "7d"
      
      # AWS S3 Configuration (Update with your actual values)
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_REGION: "${AWS_REGION:-eu-west-1}"
      AWS_S3_BUCKET: "${AWS_S3_BUCKET}"
      AWS_CLOUDFRONT_DOMAIN: "${AWS_CLOUDFRONT_DOMAIN}"
      
      # Paystack Configuration (Update with your actual values)
      PAYSTACK_SECRET_KEY: "${PAYSTACK_SECRET_KEY}"
      PAYSTACK_PUBLIC_KEY: "${PAYSTACK_PUBLIC_KEY}"
      
      # Redis Configuration
      REDIS_URL: "redis://redis:6379"
      
      # CORS Configuration
      CORS_ORIGIN: "http://localhost:3000,https://traveladdicts.org,http://traveladdicts.org"
      
      # Email Configuration (Optional)
      SMTP_HOST: "${SMTP_HOST}"
      SMTP_PORT: "${SMTP_PORT:-587}"
      SMTP_USER: "${SMTP_USER}"
      SMTP_PASS: "${SMTP_PASS}"
      
      # Application URLs
      FRONTEND_URL: "${FRONTEND_URL:-http://localhost:3000}"
      BACKEND_URL: "${BACKEND_URL:-http://localhost:4000}"
      
    volumes:
      - ./uploads:/app/uploads
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-migrate
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["sh", "-c", "npx prisma migrate deploy"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Database Seeder Service (Full seed with sample data)
  seed:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-seed
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["npx", "prisma", "db", "seed"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - seed

  # Admin User Seeder Service (Creates admin user only)
  seed-admin:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-seed-admin
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["npm", "run", "db:seed:admin"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - seed

  # Ghana Tourism Seeder Service (Ghana-specific data)
  seed-ghana:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-seed-ghana
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["npm", "run", "db:seed:ghana"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - seed

  # Gallery Seeder Service (Gallery images data)
  seed-gallery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-seed-gallery
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["npm", "run", "db:seed:gallery"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - seed

  # Prisma Studio (Optional - for database management)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-prisma-studio
    ports:
      - "5555:5555"
    environment:
      DATABASE_URL: "postgresql://travel_user:travel_secure_password_2024@postgres:5432/travel_addicts?schema=public"
    command: ["npx", "prisma", "studio", "--hostname", "0.0.0.0"]
    networks:
      - travel-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  travel-network:
    driver: bridge
