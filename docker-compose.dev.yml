version: '3.8'

services:
  # PostgreSQL Database for Development
  postgres:
    image: postgres:15-alpine
    container_name: travel-addicts-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: travel_addicts_dev
      POSTGRES_USER: travel_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d/
    networks:
      - travel-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travel_user -d travel_addicts_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Development
  redis:
    image: redis:7-alpine
    container_name: travel-addicts-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - travel-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Travel Addicts Backend API (Development Mode)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: base  # Use base stage for development
    container_name: travel-addicts-backend-dev
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://travel_user:dev_password_123@postgres:5432/travel_addicts_dev?schema=public"
      
      # Server Configuration
      NODE_ENV: development
      PORT: 4000
      
      # JWT Configuration
      JWT_SECRET: "dev_jwt_secret_not_for_production"
      JWT_EXPIRES_IN: "24h"
      
      # AWS S3 Configuration (Development - use your test bucket)
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID:-dev_access_key}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY:-dev_secret_key}"
      AWS_REGION: "${AWS_REGION:-eu-west-1}"
      AWS_S3_BUCKET: "${AWS_S3_BUCKET:-travel-addicts-dev-bucket}"
      AWS_CLOUDFRONT_DOMAIN: "${AWS_CLOUDFRONT_DOMAIN:-}"
      
      # Paystack Configuration (Development - use test keys)
      PAYSTACK_SECRET_KEY: "${PAYSTACK_SECRET_KEY:-sk_test_dev_key}"
      PAYSTACK_PUBLIC_KEY: "${PAYSTACK_PUBLIC_KEY:-pk_test_dev_key}"
      
      # Redis Configuration
      REDIS_URL: "redis://redis:6379"
      
      # CORS Configuration (Allow all origins in development)
      CORS_ORIGIN: "*"
      
      # Application URLs
      FRONTEND_URL: "http://localhost:3000"
      BACKEND_URL: "http://localhost:4000"
      
      # Development Settings
      DEBUG: "true"
      LOG_LEVEL: "debug"
      
    volumes:
      - ./src:/app/src:ro  # Mount source code for hot reload
      - ./prisma:/app/prisma:ro
      - ./uploads:/app/uploads
      - /app/node_modules  # Prevent overwriting node_modules
    networks:
      - travel-dev-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["npm", "run", "dev"]  # Use development command
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (Development)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-migrate-dev
    environment:
      DATABASE_URL: "postgresql://travel_user:dev_password_123@postgres:5432/travel_addicts_dev?schema=public"
    command: ["sh", "-c", "npx prisma migrate dev --name init && npx prisma db seed"]
    networks:
      - travel-dev-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Prisma Studio for Development
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: travel-addicts-prisma-studio-dev
    ports:
      - "5555:5555"
    environment:
      DATABASE_URL: "postgresql://travel_user:dev_password_123@postgres:5432/travel_addicts_dev?schema=public"
    command: ["npx", "prisma", "studio", "--hostname", "0.0.0.0"]
    networks:
      - travel-dev-network
    depends_on:
      postgres:
        condition: service_healthy

  # MailHog for Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: travel-addicts-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - travel-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  travel-dev-network:
    driver: bridge
